openapi: 3.0.0
info:
  title: PDF Service
  description: >-
    Endpoint targets to handle PDF operations. Splits, Merges and conversion
    should achieved by this service.


    The PDF should already be uploaded and it's resource ID is used to perform
    the operations. The document service is used to that, and to retrieve the
    files.
  version: 1.0.0
servers:
  - url: http://{{baseurl}}
paths:
  /merge:
    post:
      tags:
        - default
      summary: Merge
      description: >-
        Method used to combine multiple PDFs as pages into a single files.
        They'll retain the same order as provided in the array.


        If the PDF has multiple pages, all of those will be imported.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                source:
                  - url-identifier-for-and-uploaded-pdf
                  - url-identifier-for-and-uploaded-pdf2
                  - url-identifier-for-and-uploaded-pdf3
                  - url-identifier-for-and-uploaded-pdf4
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                resources:
                  - url-identifier-for-and-uploaded-pdf
  /split:
    post:
      tags:
        - default
      summary: Split
      description: >-
        Method used to split one PDF document in multiple other PDFs documents.
        You must specify the PDF source for the split.


        The parameter `config` is **optional**


        Inside `config` you can specify the following attributes :


        *   `pages.0.offset` specifies where the page to be extracted start.

        *   `pages.0.limit` specifies how many pages after the offset, are going
        to be taken
            

        **Note :** Multiples intervals can be defined, and multiple pages will
        be returned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                config:
                  pages:
                    - offset: 2
                      limit: 2
                source: url-identifier-for-and-uploaded-pdf
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                resources:
                  - url-identifier-for-and-uploaded-pdf1
                  - url-identifier-for-and-uploaded-pdf2
                  - url-identifier-for-and-uploaded-pdf3
                  - url-identifier-for-and-uploaded-pdf3
  /html2pdf:
    post:
      tags:
        - default
      summary: HTML to PDF
      description: >-
        This method accepts and base64 encoded HTML and generated an PDF file
        based on the markup provided.


        Under the hood, it uses the wkhtml2pdf library to achieve that.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                source:
                  - base64-encoded-html
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                resources:
                  - url-identifier-for-and-uploaded-pdf
  /pdf2png:
    post:
      tags:
        - default
      summary: PDF to PNG
      description: >-
        This method generates and PNG based on a PDF file. If the PDF contain
        multiple pages, the service will generate 1 result per page.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                source:
                  - url-identifier-for-and-uploaded-pdf
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                resources:
                  - url-identifier-for-and-uploaded-pdf
  /metadata/{resource-identifier}:
    get:
      tags:
        - default
      summary: Metadata
      description: >-
        Returns useful information about the PDF, things like Author, File name,
        Size in bytes and Number of Pages.
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: resource-identifier
          in: path
          schema:
            type: string
          required: true
          description: '(Required) '
          example: dolore ex
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                source: url-identifier-for-and-uploaded-pdf
                metadata:
                  name: filename.pdf
                  size: 10000
                  pages: 3
                  author: Author name
                  version: 1
